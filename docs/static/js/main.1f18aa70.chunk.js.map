{"version":3,"sources":["images/AbsinthePoster_Cropped.jpg","images/iPhoneWithLogoTrans.png","components/Privacy/Privacy.tsx","components/Splash/Splash.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Privacy","props","state","document","title","PrivacyContent","styled","div","PrivacyTitle","h1","target","href","React","Splash","id","className","src","AbsinthePoster","alt","PhoneScreen","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,iD,6fCStBC,E,kDACnB,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAEDC,MAAQ,GAHW,E,gEAOtBC,SAASC,MAAQ,4B,+BAIjB,IAAMC,EAAiBC,IAAOC,IAAV,KACdC,EAAeF,IAAOG,GAAV,KAClB,OAEE,gBAACJ,EAAD,KACI,gBAACG,EAAD,gCACF,yJACA,qEAA4C,qBAAGE,OAAO,SAASC,KAAK,yCAAxB,kCAA5C,4FACuF,0BAAI,0CAEvF,2CACA,gEAJJ,4BAMiC,8DANjC,KAOE,kGAAyE,qBAAGA,KAAK,+CAAR,UAAzE,KACA,oG,GA3ByBC,a,0CCEhBC,E,kDACnB,WAAYZ,GAAe,IAAD,8BACxB,cAAMA,IAEDC,MAAQ,GAHW,E,qDAOxB,OAEI,uBAAKY,GAAG,+BACN,uBAAKC,UAAU,uBAAuBD,GAAG,8BACvC,uBACEA,GAAG,0BACHE,IAAKC,IACLC,IAAI,oIAGR,uBAAKH,UAAU,mDACf,uBACEA,UAAU,uBACVD,GAAG,+BAEH,qBAAGC,UAAU,+BAAb,0BACA,qBAAGA,UAAU,0DAAb,0BACA,qBAAGA,UAAU,+BAAb,gBACA,qBAAGA,UAAU,iBAAb,uBACA,uBACED,GAAG,yBACHE,IAAKG,IACLD,IAAI,iD,GA9BkBN,aCOrBQ,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,WAAWC,UAAWvB,OCE1BwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f18aa70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AbsinthePoster_Cropped.c488b124.jpg\";","module.exports = __webpack_public_path__ + \"static/media/iPhoneWithLogoTrans.7e967035.png\";","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nexport interface Props {\n  children?: React.ReactNode;\n}\n\nexport interface State {}\n\nexport default class Privacy extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n      document.title = 'iToljaSo Privacy Policy';\n  }\n\n  render() {\n      const PrivacyContent = styled.div`background-color: white;margin:auto; padding: 10px;text-align: center; color: black; font-family: Roboto, Arial, sans-serif;`;\n      const PrivacyTitle = styled.h1`margin-bottom:1em;`;\n      return (\n        \n        <PrivacyContent>\n            <PrivacyTitle>iToljaSo Privacy Policy</PrivacyTitle>\n          <p>The iToljaSo mobile application and website do not gather any information not explicitly or implicitly provided by the user.</p>\n          <p>Users are authenticated to the system by <a target=\"_blank\" href=\"https://firebase.google.com/docs/auth\">Google Firebase Authentication</a>. \n          The following information is collected by iToljaSo based on the user's login provider: <ol><li>\n              Display Name</li>\n              <li>Email Address</li>\n              <li>\n                  Url of publically-available photo</li></ol>\n                  User email addresses are <strong>not disclosed to other users</strong>.</p>\n            <p>User information is subject to the terms and conditions laid forth by <a href=\"https://firebase.google.com/support/privacy\">Google</a>.</p>\n            <p>iToljaSo LLC does not provide user information to any third party.</p>\n\n        </PrivacyContent>\n\n\n    );\n  }\n}\n","import * as React from \"react\";\nimport \"./Splash.css\";\nimport AbsinthePoster from \"../../images/AbsinthePoster_Cropped.jpg\";\nimport PhoneScreen from \"../../images/iPhoneWithLogoTrans.png\";\n\nexport interface Props {\n  children?: React.ReactNode;\n}\n\nexport interface State {}\n\nexport default class Splash extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n\n        <div id=\"tolja-splash-flex-container\">\n          <div className=\"tolja-splash-section\" id=\"tolja-splash-section-first\">\n            <img\n              id=\"tolja-splash-img-poster\"\n              src={AbsinthePoster}\n              alt=\"I have just met the woman I shall marry! I am certain. One day, I hope some fine lads will invent an app where I can prove it.\"\n            />\n          </div>\n          <div className=\"tolja-splash-spacer tolja-splash-spacer-middle\"></div>\n          <div\n            className=\"tolja-splash-section\"\n            id=\"tolja-splash-section-second\"\n          >\n            <p className=\"tolja-splash-marketing-copy\">SEBASTIAN COULDN'T SAY</p>\n            <p className=\"tolja-splash-marketing-copy tolja-splash-marketing-pop\">&ldquo;I TOLJA SO&rdquo;</p>\n            <p className=\"tolja-splash-marketing-copy\">BUT YOU CAN.</p>\n            <p className=\"tolja-hashtag\">#AlwaysBeRightAgain</p>\n            <img\n              id=\"tolja-splash-img-phone\"\n              src={PhoneScreen}\n              alt=\"App for iPhone and Android coming soon\"\n            />\n          </div>\n\n        </div>\n\n\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Switch, Link } from \"react-router-dom\";\nimport Privacy from \"./components/Privacy/Privacy\";\nimport Splash from \"./components/Splash\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n      <Route exact path=\"/\" component={Splash} />\n      <Route exact path=\"/privacy\" component={Privacy}/>\n      </Switch>\n    </Router>\n    \n     \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}